-- Site to Format Your Code 
https://codebeautify.org/sqlformatter


-- SECTION 1 

-- Create, Dropping, and Using Database
CREATE DATABASE michael_haller;
DROP DATABASE <database-name>;
USE <database-name>;

-- Creating and Dropping Tables
CREATE TABLE haller (
    name VARCHAR(50),
    age INT);
DROP TABLE haller;

-- Inserting Data Into a Table;
INSERT INTO haller (name, age) 
VALUES 
  ('Mike', 25),
  ('Jen', 26), 
  ('Amanda', 27);
  
-- Not Null: Doesn't Mean Zero but means you can't enter a value Null
CREATE TABLE haller2 (
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL);

-- Default: If information is not there, make a deafult value
CREATE TABLE haller3  (    
    name VARCHAR(20) NOT NULL DEFAULT 'unnamed',    
    age INT NOT NULL DEFAULT 99);
    
-- Primary Key: Make a Unique Identifer For Each Row
CREATE TABLE unique_haller (
	haller_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL);
    
-- Auto Increment: Auto Generates Next ID when inserting data
CREATE TABLE unique_cats3 (
    cat_id INT AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    PRIMARY KEY (cat_id));
    
    
    
    
    
-- SECTION 2

-- SELECT Statements: * = All Columns. Entering Columns You Need Also Works
SELECT * FROM haller;
SELECT name, age FROM haller;

-- WHERE: Specify a Condition
SELECT * FROM haller WHERE name ='Mike';

-- Alias = AS: give a column you pulled a name in your results (it doesn't actually change the name of the column in the table)
SELECT haller_id AS id, name FROM haller;

-- UPDATE: Can modify in your dataset and shcnage values
UPDATE cats SET breed='Shorthair' WHERE breed='Tabby';




-- SECTION 3

-- CONCAT: Combine two or more items togethers. 
-- CONCAT_WS: Adds a separator between what you combine
SELECT CONCAT(author_fname,' ', author_lname) AS author_name FROM books
SELECT CONCAT_WS('-',title, author_fname, author_lname) FROM books;

-- SUBSTR = SUBSTRING: Pulls an amount of text out of a string
SELECT SUBSTRING(title, 1, 10) AS 'short title' FROM books;
SELECT SUBSTR(title, 1, 10) AS 'short title' FROM books;
-- This pulls the starting pint you want and goes to the end
SELECT SUBSTRING('Hello World', 7);

-- REPLACE: Replace parts of string
SELECT REPLACE('Hello World', 'o', '0');

-- REVERSE : Reverses the text
SELECT CONCAT(author_fname, REVERSE(author_fname)) FROM books;

-- CHAR_LENGTH = number of string length
SELECT CONCAT(author_lname, ' is ', CHAR_LENGTH(author_lname), ' characters long') FROM books;

-- UPPER and LOWER: Uppercase/Lowercase a str
SELECT UPPER('Hello World');
SELECT LOWER('Hello World');

-- INSERT base on spot = Example is based on the space between Hello and Bobby
SELECT INSERT('Hello Bobby', 6, 0, 'There'); 

-- LEFT: Brings left most values
SELECT LEFT('omghahalol!', 3);

-- RIGHT: Brings Right most values
SELECT RIGHT('omghahalol!', 4);
 
-- REPEAT: Repeats str many times
SELECT REPEAT('ha', 4);
 
-- TRIM: Removes blank space before or after a word
SELECT TRIM('  pickle  ');




-- SECTION 4

-- DISTICT: Returns a list of names without duplicates
SELECT DISTINCT CONCAT(author_fname,' ', author_lname) FROM books;
SELECT DISTINCT author_fname, author_lname FROM books;

-- ORDER BY: Sorts your results
SELECT * FROM books
ORDER BY released_year;
-- ORDER BY the second Column
SELECT book_id, author_fname, author_lname, pages
FROM books ORDER BY 2 desc;
--  ORDER BY last name first and then order by first name
SELECT book_id, author_fname, author_lname, pages
FROM books ORDER BY author_lname, author_fname;

-- LIMIT: Shows how many results you want. Examples below produces 14 values and the seocnd produces results from the 0 value to 5 value
SELECT title, released_year FROM books 
ORDER BY released_year DESC LIMIT 14;
SELECT title, released_year FROM books 
ORDER BY released_year DESC LIMIT 0,5;

-- LIKE: Better searching
-- % = wildcards 
SELECT title, author_fname, author_lname, pages 
FROM books
WHERE author_fname LIKE '%da%';
-- To select books with '%' in their title:
SELECT * FROM books
WHERE title LIKE '%\%%';
-- To select books with an underscore '_' in title:
SELECT * FROM books
WHERE title LIKE '%\_%';





-- SECTION 5

-- COUNT: Counts numbers of each
SELECT COUNT(*) FROM books;
SELECT COUNT(DISTINCT author_lname) FROM books;

-- GORUP BY: Summarizes or Aggregates identical data into single rows
SELECT author_lname, COUNT(*) 
FROM books
GROUP BY author_lname;

-- MAX MIN - Highest/Lowest values in the columns
SELECT MAX(pages) FROM books;
SELECT MIN(author_lname) FROM books;

-- Subqueries: Query in a Query = does the inside query first
SELECT title, pages FROM books
WHERE pages = (SELECT MAX(pages) FROM books);

-- SUM and AVG: Self Explanitory 
SELECT author_lname, COUNT(*), SUM(pages)
FROM books
GROUP BY author_lname;
SELECT 
    released_year, 
    AVG(stock_quantity), 
    COUNT(*) FROM books
GROUP BY released_year;




-- SECTION 7

-- Not Equal: symbols are !=
SELECT * FROM books
WHERE released_year != 2017;

-- Not Like: What you don't want
SELECT * FROM books
WHERE title NOT LIKE '%e%';

-- Less Than or Equal too: Symbols are <=
SELECT * FROM books
WHERE released_year <= 1985;

-- AND: Where other conditions must be met
SELECT title, author_lname, released_year FROM books
WHERE released_year > 2010
AND author_lname = 'Eggers'
AND title LIKE '%novel%';

-- OR: Where only one condition needs to be met
SELECT title, author_lname, released_year FROM books
WHERE author_lname='Eggers' OR
released_year > 2010;

-- BETWEEN: Must be in the middle of two values
SELECT title, released_year FROM books
WHERE released_year BETWEEN 2004 AND 2014;

-- IN: looks at items IN a subset
SELECT title, author_lname FROM books
WHERE author_lname IN ('Carver', 'Lahiri', 'Smith');
-- %: Modulo: Shows remainder when doing division
SELECT title, released_year FROM books
WHERE released_year >= 2000 
AND released_year % 2 = 1;

-- CASE: To make outcomes based on values
SELECT 
    title,
    stock_quantity,
    CASE
        WHEN stock_quantity BETWEEN 0 AND 40 THEN '*'
        WHEN stock_quantity BETWEEN 41 AND 70 THEN '**'
        WHEN stock_quantity BETWEEN 71 AND 100 THEN '***'
        WHEN stock_quantity BETWEEN 101 AND 140 THEN '****'
        ELSE '*****'
    END AS stock
FROM
    books;





-- SECTION 8

-- UNIQUE: Values in the column must be different
CREATE TABLE contacts (
	name VARCHAR(100) NOT NULL,
    phone VARCHAR(15) NOT NULL UNIQUE);

-- CHECK: Sayswhat be met for an item to be added
CREATE TABLE users (
	username VARCHAR(20) NOT NULL,
    age INT CHECK (age > 0));
-- CONSTRAINT: is a way to name the Check    
CREATE TABLE users2 (
    username VARCHAR(20) NOT NULL,
    age INT,
    CONSTRAINT age_not_negative CHECK (age >= 0)); 

-- ALTER: Adding columns in a table
ALTER TABLE companies
ADD COLUMN employee_count INT NOT NULL DEFAULT 1;
--
--
--
--
--
--
--
--
--
--
--


